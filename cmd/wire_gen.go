// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/hmmm42/city-picks/internal/adapter/cache"
	"github.com/hmmm42/city-picks/internal/adapter/persistent"
	"github.com/hmmm42/city-picks/internal/config"
	"github.com/hmmm42/city-picks/internal/handler"
	"github.com/hmmm42/city-picks/internal/repository"
	"github.com/hmmm42/city-picks/internal/router"
	"github.com/hmmm42/city-picks/internal/service"
	"github.com/hmmm42/city-picks/pkg/logger"
)

// Injectors from wire.go:

func InitApp() (*App, func(), error) {
	options, err := config.NewOptions()
	if err != nil {
		return nil, nil, err
	}
	mySQLSetting := options.MySQL
	db, cleanup, err := persistent.NewMySQL(mySQLSetting)
	if err != nil {
		return nil, nil, err
	}
	userRepo := repository.NewUserRepo(db)
	redisSetting := options.Redis
	client, cleanup2, err := cache.NewRedisClient(redisSetting)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	logSettings := options.Log
	slogLogger, err := logger.NewLogger(logSettings)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userService := service.NewUserService(userRepo, client, slogLogger)
	loginHandler := handler.NewLoginHandler(userService)
	shopRepo := repository.NewShopRepo(db, client)
	shopService := service.NewShopService(shopRepo)
	handlerShopService := handler.NewShopService(shopService)
	voucherRepo := repository.NewVoucherRepo(db, slogLogger)
	voucherOrderRepo := repository.NewVoucherOrderRepo(db, slogLogger)
	voucherService := service.NewVoucherService(voucherRepo, voucherOrderRepo, client, slogLogger)
	voucherHandler := handler.NewVoucherHandler(voucherService)
	engine := router.NewRouter(loginHandler, handlerShopService, voucherHandler)
	app := &App{
		Engine: engine,
	}
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type App struct {
	Engine *gin.Engine
}

var configSet = wire.NewSet(config.NewOptions, wire.FieldsOf(new(*config.Options),

	"MySQL", "Redis", "Log", "JWT", "Server"))

var dbSet = wire.NewSet(persistent.NewMySQL, cache.NewRedisClient, cache.NewRedsync)

var loggerSet = wire.NewSet(logger.NewLogger)

var repositorySet = wire.NewSet(repository.NewUserRepo, repository.NewShopRepo, repository.NewVoucherRepo, repository.NewVoucherOrderRepo)

var serviceSet = wire.NewSet(service.NewUserService, service.NewShopService, service.NewVoucherService)

var handlerSet = wire.NewSet(handler.NewLoginHandler, handler.NewShopService, handler.NewVoucherHandler)

var routerSet = wire.NewSet(router.NewRouter)
